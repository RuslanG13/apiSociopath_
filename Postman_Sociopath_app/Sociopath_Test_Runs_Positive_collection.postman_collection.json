{
	"info": {
		"_postman_id": "b294bad5-a66a-42fb-9d58-921cff431e3d",
		"name": "Sociopath_Test_ Runs_Positive_collection",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "userCreate",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();\r",
							"pm.environment.set('userCreate', jsonData.data.userCreate)\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Status code name has string\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"pm.test(\"Response time is less than 2600ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2600);\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// // const email = JSON.parse(pm.request.body.graphql.variables).email;\r",
							"// // pm.environment.get('email');\r",
							"//   const password  = JSON.parse(pm.request.body.graphql.variables).password;\r",
							"//  pm.environment.get('password');"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation userCreate ($email: String!, $password: String!) {\n    userCreate (email: $email, password: $password)\n}",
						"variables": "{\n  \"email\": \"{{email}}\",\n  \"password\": \"{{password}}\"\n}"
					}
				},
				"url": {
					"raw": "{{url}}",
					"host": [
						"{{url}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "userActivate",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Status code name has string\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"pm.test(\"Response time is less than 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"Activation Successful!\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation userActivate ($activationLinkId: String!) {\n    userActivate (activationLinkId: $activationLinkId)\n}",
						"variables": "{\n  \"activationLinkId\": \"{{userCreate}}\"\n}"
					}
				},
				"url": {
					"raw": "{{url}}",
					"host": [
						"{{url}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "login ",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();\r",
							"pm.environment.set('token', jsonData.data.login.accessToken);\r",
							"\r",
							"pm.environment.set('_userId', jsonData.data.login.user._id);\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code name has string\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 2000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"});\r",
							"\r",
							"const [beforeDog, pastDog] = jsonData.data.login.user.firstName.split(\"@\")\r",
							"\r",
							"pm.test(\"First name verification\", function() {\r",
							"    pm.expect(jsonData.data.login.user.firstName, 'wrong firstName').to.be.eql(beforeDog)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query login ($email: String!, $password: String!) {\n    login (email: $email, password: $password) {\n        accessToken\n        user {\n            _id\n            email\n            firstName\n            lastName\n         #   phone\n            about\n            image\n            jobTitle\n            level\n            languages\n            roles\n            links\n            starredProblems\n            starredPublications\n            lastAccess\n            createdAt\n            updatedAt\n            isActivated\n            activationLinkId\n        }\n    }\n}",
						"variables": "{\n  \"email\": \"{{email}}\",\n  \"password\": \"{{password}}\"\n}"
					}
				},
				"url": {
					"raw": "{{url}}",
					"host": [
						"{{url}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "userUpdate",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code name has string\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"pm.test(\"Response time is less than 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation userUpdate ($userId: ID!, $values: UserInput) {\n    userUpdate (userId: $userId, values: $values)\n}",
						"variables": "{\n  \"userId\": \"{{_userId}}\",\n  \"values\": {\n    \"email\": \"{{email}}\",\n    \"firstName\": \"{{firstName}}\",\n    \"lastName\": \"{{lastName}}\",\n    \"about\": \"\",\n    \"image\": \"\",\n    \"jobTitle\": \"{{jobTitle}}\",\n    \"languages\": [\n      \"{{language}}\"\n    ]\n  }\n}"
					}
				},
				"url": {
					"raw": "{{url}}",
					"host": [
						"{{url}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "publicationCreate\"",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code name has string\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"Publication created\");\r",
							"});\r",
							"\r",
							"// pm.test(\"Pub_created\", function () {\r",
							"//     pm.response.to.have.body(\"Publication created\");\r",
							"// });\r",
							"\r",
							"const requesVars = JSON.parse(pm.request.body.graphql.variables);\r",
							"pm.environment.set(\"title_pub\", requesVars.values.title);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation publicationCreate ($values: PublicationInput) {\n    publicationCreate (values: $values)\n}",
						"variables": "{\n  \"values\": {\n    \"title\": \"dka\",\n    \"description\": \"{{description_pub}}\",\n    \"content\": \"{{content_pub}}\",\n    \"image\": \"\"\n  }\n}"
					}
				},
				"url": {
					"raw": "{{url}}",
					"host": [
						"{{url}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "publications",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const body = pm.response.json();\r",
							"\r",
							"let arr = body.data.publications;\r",
							"\r",
							"const pub_id = arr.find(el => el.title == pm.environment.get(\"title_pub\"))._id\r",
							"\r",
							"pm.environment.set(\"pub_id\", pub_id)\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code name has string\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 2000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query publications ($offset: Int, $limit: Int) {\n    publications (offset: $offset, limit: $limit) {\n        _id\n        title\n        description\n        content\n        image\n        owner {\n            _id\n            email\n            firstName\n            lastName\n          #  phone\n            about\n            image\n            jobTitle\n            level\n            languages\n            roles\n            links\n            starredProblems\n            starredPublications\n            lastAccess\n            createdAt\n            updatedAt\n            isActivated\n            activationLinkId\n        }\n        likes {\n            _id\n            email\n            firstName\n            lastName\n          #  phone\n            about\n            image\n            jobTitle\n            level\n            languages\n            roles\n            links\n            starredProblems\n            starredPublications\n            lastAccess\n            createdAt\n            updatedAt\n            isActivated\n            activationLinkId\n        }\n        createdAt\n        updatedAt\n    }\n}",
						"variables": "{\n  \"offset\": 0,\n  \"limit\": 5\n}"
					}
				},
				"url": {
					"raw": "{{url}}",
					"host": [
						"{{url}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "publicationUpdate",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code name has string\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 2000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"});\r",
							"\r",
							"pm.test(\"Publication updated\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"Publication updated\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation publicationUpdate ($pubId: ID!, $values: PublicationInput) {\n    publicationUpdate (pubId: $pubId, values: $values)\n}",
						"variables": "{\n  \"pubId\": \"{{pub_id}}\",\n  \"values\": {\n    \"title\": \"{{title_change_pub}}\",\n    \"description\": \"{{$randomCatchPhraseDescriptor}}\",\n    \"content\": \"{{content_pub}}\",\n    \"image\": \"\"\n  }\n}"
					}
				},
				"url": {
					"raw": "{{url}}",
					"host": [
						"{{url}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "publicationLike",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Publication liked\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"Publication liked\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 2000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code name has string\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation publicationLike ($pubId: ID!) {\n    publicationLike (pubId: $pubId)\n}",
						"variables": "{\n  \"pubId\": \"{{pub_id}}\"\n}"
					}
				},
				"url": {
					"raw": "{{url}}",
					"host": [
						"{{url}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "commentCreate-",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Status code name has string\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"pm.test(\"Response time is less than 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"let body = pm.response.json();\r",
							"pm.environment.set('comment_id', body.data.commentCreate._id)\r",
							"// pm.test(\"Verify comment created\", function () {\r",
							"//     var jsonData = pm.response.json();\r",
							"//     pm.expect(jsonData.data.commentCreate.content).to.eql(comment);\r",
							"// });"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation commentCreate ($parentId: ID!, $content: String!) {\n    commentCreate (parentId: $parentId, content: $content) {\n        _id\n        parentId\n        content\n        likes {\n            _id\n            email\n            firstName\n            lastName\n           # phone\n            about\n            image\n            jobTitle\n            level\n            languages\n            roles\n            links\n            starredProblems\n            starredPublications\n            lastAccess\n            createdAt\n            updatedAt\n            isActivated\n            activationLinkId\n        }\n        owner {\n            _id\n            email\n            firstName\n            lastName\n          #  phone\n            about\n            image\n            jobTitle\n            level\n            languages\n            roles\n            links\n            starredProblems\n            starredPublications\n            lastAccess\n            createdAt\n            updatedAt\n            isActivated\n            activationLinkId\n        }\n        createdAt\n        updatedAt\n    }\n}",
						"variables": "{\n  \"parentId\": \"{{pub_id}}\",\n  \"content\": \"{{comment}}\"\n}"
					}
				},
				"url": {
					"raw": "{{url}}",
					"host": [
						"{{url}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "commentUpdate",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Status code name has string\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"pm.test(\"Response time is less than 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation commentUpdate ($commentId: ID!, $content: String!) {\n    commentUpdate (commentId: $commentId, content: $content) {\n        _id\n        parentId\n        content\n        likes {\n            _id\n            email\n            firstName\n            lastName\n           # phone\n            about\n            image\n            jobTitle\n            level\n            languages\n            roles\n            links\n            starredProblems\n            starredPublications\n            lastAccess\n            createdAt\n            updatedAt\n            isActivated\n            activationLinkId\n        }\n        owner {\n            _id\n            email\n            firstName\n            lastName\n          #  phone\n            about\n            image\n            jobTitle\n            level\n            languages\n            roles\n            links\n            starredProblems\n            starredPublications\n            lastAccess\n            createdAt\n            updatedAt\n            isActivated\n            activationLinkId\n        }\n        createdAt\n        updatedAt\n    }\n}",
						"variables": "{\n  \"commentId\": \"{{comment_id}}\",\n  \"content\": \"{{$randomLoremWord}}\"\n}"
					}
				},
				"url": {
					"raw": "{{url}}",
					"host": [
						"{{url}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "commentLike",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code name has string\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"// pm.test(\"Comment liked verification\", function () {\r",
							"//     pm.response.to.have.body(\"Comment liked\");\r",
							"// });\r",
							"\r",
							"pm.test(\"Comment liked\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"Comment liked\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation commentLike ($commentId: ID!) {\n    commentLike (commentId: $commentId)\n}",
						"variables": "{\n  \"commentId\": \"{{comment_id}}\"\n}"
					}
				},
				"url": {
					"raw": "{{url}}",
					"host": [
						"{{url}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "commentDelete",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code name has string\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"// pm.test(\"Comment deleted verification\", function () {\r",
							"//     pm.response.to.have.body(\"Comment deleted\");\r",
							"// });\r",
							"\r",
							"pm.test(\"Comment deleted\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"Comment deleted\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation commentDelete ($commentId: ID!) {\n    commentDelete (commentId: $commentId)\n}",
						"variables": "{\n  \"commentId\": \"{{comment_id}}\"\n}"
					}
				},
				"url": {
					"raw": "{{url}}",
					"host": [
						"{{url}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "publicationDelete",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Status code name has string\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"pm.test(\"Response time is less than 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"Publication deleted\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation publicationDelete ($pubId: ID!) {\n    publicationDelete (pubId: $pubId)\n}",
						"variables": "{\n  \"pubId\": \"{{pub_id}}\"\n}"
					}
				},
				"url": {
					"raw": "{{url}}",
					"host": [
						"{{url}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "companyCreate",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code name has string\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 2000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"});\r",
							"\r",
							"\r",
							"const Body = pm.response.json()\r",
							"pm.environment.set(\"company_id\", Body.data.companyCreate)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation companyCreate ($data: CompanyInput) {\n    companyCreate (data: $data)\n}",
						"variables": "{\n  \"data\": {\n    \"title\": \"{{title_company}}\",\n    \"description\": \"Something description\",\n    \"image\": \"----\",\n    \"link\": \"--\"\n  }\n}"
					}
				},
				"url": {
					"raw": "{{url}}",
					"host": [
						"{{url}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "companyUpdate",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code name has string\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 2000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"});\r",
							"\r",
							"const Body = pm.response.json()\r",
							"\r",
							" pm.test(\"Company updated verification\", function () {\r",
							"     pm.expect(Body.data.companyUpdate).to.eql(\"Company updated\")\r",
							" });\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation companyUpdate ($companyId: ID!, $data: CompanyInput) {\n    companyUpdate (companyId: $companyId, data: $data)\n}",
						"variables": "{\n  \"companyId\": \"{{company_id}}\",\n  \"data\": {\n    \"title\": \"some title\",\n    \"description\": \"test description\",\n    \"image\": \"---\",\n    \"link\": \"---\"\n  }\n}"
					}
				},
				"url": {
					"raw": "{{url}}",
					"host": [
						"{{url}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "problemCreate",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code name has string\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 2000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"});\r",
							"\r",
							"pm.test(\"Problem created verification\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"Problem created\");\r",
							"});\r",
							"\r",
							"const requesVars = JSON.parse(pm.request.body.graphql.variables);\r",
							"pm.environment.set(\"title_problem\", requesVars.data.title);\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation problemCreate ($data: ProblemInput) {\n    problemCreate (data: $data)\n}",
						"variables": "{\n  \"data\": {\n    \"title\": \"{{title_problem}}\",\n    \"content\": \"desc\",\n    \"company\": \"{{company_id}}\",\n    \"jobTitle\": \"{{jobTitle}}\",\n    \"hidden\": true\n  }\n}"
					}
				},
				"url": {
					"raw": "{{url}}",
					"host": [
						"{{url}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "problems",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const body = pm.response.json();\r",
							"\r",
							"let arr = body.data.problems;\r",
							"\r",
							"const problem_id = arr.find(el => el.title == pm.environment.get(\"title_problem\"))._id\r",
							"\r",
							"pm.environment.set(\"problem_id\", problem_id)\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code name has string\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query problems ($offset: Int, $limit: Int) {\n    problems (offset: $offset, limit: $limit) {\n        _id\n        title\n        content\n        company {\n            _id\n            title\n            description\n            image\n            link\n            problems {\n                _id\n                title\n                content\n                jobTitle\n                solutions {\n                    _id\n                    problemId\n                    content\n                    likes {\n                        _id\n                        email\n                        firstName\n                        lastName\n                       # phone\n                        about\n                        image\n                        jobTitle\n                        level\n                        languages\n                        roles\n                        links\n                        starredProblems\n                        starredPublications\n                        lastAccess\n                        createdAt\n                        updatedAt\n                        isActivated\n                        activationLinkId\n                    }\n                    owner {\n                        _id\n                        email\n                        firstName\n                        lastName\n                       # phone\n                        about\n                        image\n                        jobTitle\n                        level\n                        languages\n                        roles\n                        links\n                        starredProblems\n                        starredPublications\n                        lastAccess\n                        createdAt\n                        updatedAt\n                        isActivated\n                        activationLinkId\n                    }\n                    complexity\n                    createdAt\n                    updatedAt\n                }\n                owner {\n                    _id\n                    email\n                    firstName\n                    lastName\n                  #  phone\n                    about\n                    image\n                    jobTitle\n                    level\n                    languages\n                    roles\n                    links\n                    starredProblems\n                    starredPublications\n                    lastAccess\n                    createdAt\n                    updatedAt\n                    isActivated\n                    activationLinkId\n                }\n            }\n        }\n        jobTitle\n        solutions {\n            _id\n            problemId\n            content\n            likes {\n                _id\n                email\n                firstName\n                lastName\n               # phone\n                about\n                image\n                jobTitle\n                level\n                languages\n                roles\n                links\n                starredProblems\n                starredPublications\n                lastAccess\n                createdAt\n                updatedAt\n                isActivated\n                activationLinkId\n            }\n            owner {\n                _id\n                email\n                firstName\n                lastName\n              #  phone\n                about\n                image\n                jobTitle\n                level\n                languages\n                roles\n                links\n                starredProblems\n                starredPublications\n                lastAccess\n                createdAt\n                updatedAt\n                isActivated\n                activationLinkId\n            }\n            complexity\n            createdAt\n            updatedAt\n        }\n        owner {\n            _id\n            email\n            firstName\n            lastName\n          #  phone\n            about\n            image\n            jobTitle\n            level\n            languages\n            roles\n            links\n            starredProblems\n            starredPublications\n            lastAccess\n            createdAt\n            updatedAt\n            isActivated\n            activationLinkId\n        }\n    }\n}",
						"variables": "{\n  \"offset\": 0,\n  \"limit\": 5\n}"
					}
				},
				"url": {
					"raw": "{{url}}",
					"host": [
						"{{url}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "problemUpdate",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code name has string\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 2000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"});\r",
							"\r",
							"// pm.test(\"Problem updated verification\", function () {\r",
							"//     pm.response.to.have.body(\"Problem updated\");\r",
							"// });\r",
							"const Body = pm.response.json();\r",
							" pm.test(\"Problem updated verification\", function () {\r",
							"     pm.expect(Body.data.problemUpdate).to.eql(\"Problem updated\")\r",
							" });"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation problemUpdate ($problemId: ID!, $data: ProblemInput) {\n    problemUpdate (problemId: $problemId, data: $data)\n}",
						"variables": "{\n  \"problemId\": \"{{problem_id}}\",\n  \"data\": {\n    \"title\": \"new problem\",\n    \"content\": \"some content problem\",\n    \"company\": \"{{company_id}}\",\n    \"jobTitle\": \"{{jobTitle}}\",\n    \"hidden\": true\n  }\n}"
					}
				},
				"url": {
					"raw": "{{url}}",
					"host": [
						"{{url}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "solutionCreate",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code name has string\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 2500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2500);\r",
							"});\r",
							"\r",
							"// pm.test(\"Solution created verification\", function () {\r",
							"//     pm.response.to.have.body(\"Solution created\");\r",
							"// });\r",
							"const Body = pm.response.json();\r",
							" pm.test(\"Solution created verification\", function () {\r",
							"     pm.expect(Body.data.solutionCreate).to.eql(\"Solution created\")\r",
							" });"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation solutionCreate ($problemId: ID!, $content: String!) {\n    solutionCreate (problemId: $problemId, content: $content)\n}",
						"variables": "{\n  \"problemId\": \"{{problem_id}}\",\n  \"content\": \"{{content_solution}}\"\n}"
					}
				},
				"url": {
					"raw": "{{url}}",
					"host": [
						"{{url}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "solutions",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const body = pm.response.json();\r",
							"\r",
							"let arr = body.data.solutions;\r",
							"\r",
							"const solution_id = arr.find(el => el.content == pm.environment.get(\"content_solution\"))._id\r",
							"\r",
							"pm.environment.set(\"solution_id\", solution_id)\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code name has string\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 2000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query solutions {\n    solutions {\n        _id\n        problemId\n        content\n        likes {\n            _id\n            email\n            firstName\n            lastName\n           # phone\n            about\n            image\n            jobTitle\n            level\n            languages\n            roles\n            links\n            starredProblems\n            starredPublications\n            lastAccess\n            createdAt\n            updatedAt\n            isActivated\n            activationLinkId\n        }\n        owner {\n            _id\n            email\n            firstName\n            lastName\n           # phone\n            about\n            image\n            jobTitle\n            level\n            languages\n            roles\n            links\n            starredProblems\n            starredPublications\n            lastAccess\n            createdAt\n            updatedAt\n            isActivated\n            activationLinkId\n        }\n        complexity\n        createdAt\n        updatedAt\n    }\n}",
						"variables": "{}"
					}
				},
				"url": {
					"raw": "{{url}}",
					"host": [
						"{{url}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "solutionUpdate",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code name has string\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 2500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2500);\r",
							"});\r",
							"\r",
							"// pm.test(\"Solution updated verification\", function () {\r",
							"//     pm.response.to.have.body(\"Solution updated\");\r",
							"// });"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation solutionUpdate ($solutionId: ID!, $content: String!) {\n    solutionUpdate (solutionId: $solutionId, content: $content)\n}",
						"variables": "{\n  \"solutionId\": \"{{solution_id}}\",\n  \"content\": \"new ycontent\"\n}"
					}
				},
				"url": {
					"raw": "{{url}}",
					"host": [
						"{{url}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "solutionLike",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code name has string\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 2500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2500);\r",
							"});\r",
							"\r",
							"// pm.test(\"Solution liked verification\", function () {\r",
							"//     pm.response.to.have.body.data(\"Solution liked\");\r",
							"// });"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation solutionLike ($solutionId: ID!) {\n    solutionLike (solutionId: $solutionId)\n}",
						"variables": "{\n  \"solutionId\": \"{{solution_id}}\"\n}"
					}
				},
				"url": {
					"raw": "{{url}}",
					"host": [
						"{{url}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "solutionDelete",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code name has string\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"// pm.test(\"Solution deleted verification\", function () {\r",
							"//     pm.response.to.have.body(\"Solution deleted\");\r",
							"// });"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation solutionDelete ($solutionId: ID!) {\n    solutionDelete (solutionId: $solutionId)\n}",
						"variables": "{\n  \"solutionId\": \"{{solution_id}}\"\n}"
					}
				},
				"url": {
					"raw": "{{url}}",
					"host": [
						"{{url}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "problemDelete",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code name has string\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 2000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"});\r",
							"\r",
							"// pm.test(\"Problem deleted verification\", function () {\r",
							"//     pm.response.to.have.body(\"The Problem and all its Solutions have been deleted\");\r",
							"// });\r",
							"\r",
							"const Body = pm.response.json();\r",
							" pm.test(\"Problem deleted verification\", function () {\r",
							"     pm.expect(Body.data.problemDelete).to.eql(\"The Problem and all its Solutions have been deleted\")\r",
							" });"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation problemDelete ($problemId: ID!) {\n    problemDelete (problemId: $problemId)\n}",
						"variables": "{\n  \"problemId\": \"{{problem_id}}\"\n}"
					}
				},
				"url": {
					"raw": "{{url}}",
					"host": [
						"{{url}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "companyDelete",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code name has string\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"// pm.test(\"Company deleted verification\", function () {\r",
							"//     pm.response.to.have.body(\"Company deleted\");\r",
							"// });\r",
							"const Body = pm.response.json();\r",
							" pm.test(\"Company deleted verification\", function () {\r",
							"     pm.expect(Body.data.companyDelete).to.eql(\"Company deleted\")\r",
							" });\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation companyDelete ($companyId: ID!) {\n    companyDelete (companyId: $companyId)\n}",
						"variables": "{\n  \"companyId\": \"{{company_id}}\"\n}"
					}
				},
				"url": {
					"raw": "{{url}}",
					"host": [
						"{{url}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "logout Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Status code name has string\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"pm.test(\"Response time is less than 2600ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2600);\r",
							"});\r",
							"\r",
							"pm.test(\"Logout_test\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data.logout).to.eql(true);\r",
							"});\r",
							"\r",
							"postman.setNextRequest(null);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query logout {\n    logout\n}",
						"variables": "{}"
					}
				},
				"url": {
					"raw": "{{url}}",
					"host": [
						"{{url}}"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}